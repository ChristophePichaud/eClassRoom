// <auto-generated />
using System;
using EFModel;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EFModel.Migrations
{
    [DbContext(typeof(EClassRoomDbContext))]
    [Migration("20250918161858_Update1")]
    partial class Update1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CodePostal")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmailAdministrateur")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MotDePasseAdministrateur")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NomSociete")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Pays")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Ville")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Facture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Mois")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Montant")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Factures");
                });

            modelBuilder.Entity("MachineVirtuelle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DiskISO")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FichierRDP")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NomMarketingVM")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Offer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SalleDeFormationId")
                        .HasColumnType("integer");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StagiaireId")
                        .HasColumnType("integer");

                    b.Property<string>("Supervision")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TypeOS")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TypeVM")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SalleDeFormationId");

                    b.HasIndex("StagiaireId");

                    b.ToTable("MachinesVirtuelles");
                });

            modelBuilder.Entity("ProvisionningVM", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateProvisionning")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PublicIp")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SalleDeFormationId")
                        .HasColumnType("integer");

                    b.Property<int>("StagiaireId")
                        .HasColumnType("integer");

                    b.Property<string>("VmName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SalleDeFormationId");

                    b.HasIndex("StagiaireId");

                    b.ToTable("ProvisionningVMs");
                });

            modelBuilder.Entity("SalleDeFormation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateDebut")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateFin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FormateurId")
                        .HasColumnType("integer");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("FormateurId");

                    b.ToTable("SallesDeFormation");
                });

            modelBuilder.Entity("Utilisateur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MotDePasse")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<int?>("SalleDeFormationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("SalleDeFormationId");

                    b.ToTable("Utilisateurs");
                });

            modelBuilder.Entity("Facture", b =>
                {
                    b.HasOne("Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("MachineVirtuelle", b =>
                {
                    b.HasOne("SalleDeFormation", "Salle")
                        .WithMany("Machines")
                        .HasForeignKey("SalleDeFormationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Utilisateur", "Stagiaire")
                        .WithMany()
                        .HasForeignKey("StagiaireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Salle");

                    b.Navigation("Stagiaire");
                });

            modelBuilder.Entity("ProvisionningVM", b =>
                {
                    b.HasOne("SalleDeFormation", "SalleDeFormation")
                        .WithMany()
                        .HasForeignKey("SalleDeFormationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Utilisateur", "Stagiaire")
                        .WithMany()
                        .HasForeignKey("StagiaireId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SalleDeFormation");

                    b.Navigation("Stagiaire");
                });

            modelBuilder.Entity("SalleDeFormation", b =>
                {
                    b.HasOne("Client", "Client")
                        .WithMany("Salles")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Utilisateur", "Formateur")
                        .WithMany()
                        .HasForeignKey("FormateurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Formateur");
                });

            modelBuilder.Entity("Utilisateur", b =>
                {
                    b.HasOne("Client", "Client")
                        .WithMany("Utilisateurs")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SalleDeFormation", null)
                        .WithMany("Stagiaires")
                        .HasForeignKey("SalleDeFormationId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Client", b =>
                {
                    b.Navigation("Salles");

                    b.Navigation("Utilisateurs");
                });

            modelBuilder.Entity("SalleDeFormation", b =>
                {
                    b.Navigation("Machines");

                    b.Navigation("Stagiaires");
                });
#pragma warning restore 612, 618
        }
    }
}
